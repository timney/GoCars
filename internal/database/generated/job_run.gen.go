// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"carsdb/internal/database/model"
)

func newJobRun(db *gorm.DB, opts ...gen.DOOption) jobRun {
	_jobRun := jobRun{}

	_jobRun.jobRunDo.UseDB(db, opts...)
	_jobRun.jobRunDo.UseModel(&model.JobRun{})

	tableName := _jobRun.jobRunDo.TableName()
	_jobRun.ALL = field.NewAsterisk(tableName)
	_jobRun.ID = field.NewInt32(tableName, "id")
	_jobRun.CreatedAt = field.NewTime(tableName, "created_at")
	_jobRun.JobID = field.NewString(tableName, "job_id")
	_jobRun.Results = field.NewInt64(tableName, "results")
	_jobRun.Description = field.NewString(tableName, "description")
	_jobRun.CompletedAt = field.NewTime(tableName, "completed_at")
	_jobRun.ModelID = field.NewInt32(tableName, "model_id")

	_jobRun.fillFieldMap()

	return _jobRun
}

type jobRun struct {
	jobRunDo

	ALL         field.Asterisk
	ID          field.Int32
	CreatedAt   field.Time
	JobID       field.String
	Results     field.Int64
	Description field.String
	CompletedAt field.Time
	ModelID     field.Int32

	fieldMap map[string]field.Expr
}

func (j jobRun) Table(newTableName string) *jobRun {
	j.jobRunDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jobRun) As(alias string) *jobRun {
	j.jobRunDo.DO = *(j.jobRunDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jobRun) updateTableName(table string) *jobRun {
	j.ALL = field.NewAsterisk(table)
	j.ID = field.NewInt32(table, "id")
	j.CreatedAt = field.NewTime(table, "created_at")
	j.JobID = field.NewString(table, "job_id")
	j.Results = field.NewInt64(table, "results")
	j.Description = field.NewString(table, "description")
	j.CompletedAt = field.NewTime(table, "completed_at")
	j.ModelID = field.NewInt32(table, "model_id")

	j.fillFieldMap()

	return j
}

func (j *jobRun) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jobRun) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 7)
	j.fieldMap["id"] = j.ID
	j.fieldMap["created_at"] = j.CreatedAt
	j.fieldMap["job_id"] = j.JobID
	j.fieldMap["results"] = j.Results
	j.fieldMap["description"] = j.Description
	j.fieldMap["completed_at"] = j.CompletedAt
	j.fieldMap["model_id"] = j.ModelID
}

func (j jobRun) clone(db *gorm.DB) jobRun {
	j.jobRunDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j jobRun) replaceDB(db *gorm.DB) jobRun {
	j.jobRunDo.ReplaceDB(db)
	return j
}

type jobRunDo struct{ gen.DO }

type IJobRunDo interface {
	gen.SubQuery
	Debug() IJobRunDo
	WithContext(ctx context.Context) IJobRunDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IJobRunDo
	WriteDB() IJobRunDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IJobRunDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IJobRunDo
	Not(conds ...gen.Condition) IJobRunDo
	Or(conds ...gen.Condition) IJobRunDo
	Select(conds ...field.Expr) IJobRunDo
	Where(conds ...gen.Condition) IJobRunDo
	Order(conds ...field.Expr) IJobRunDo
	Distinct(cols ...field.Expr) IJobRunDo
	Omit(cols ...field.Expr) IJobRunDo
	Join(table schema.Tabler, on ...field.Expr) IJobRunDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IJobRunDo
	RightJoin(table schema.Tabler, on ...field.Expr) IJobRunDo
	Group(cols ...field.Expr) IJobRunDo
	Having(conds ...gen.Condition) IJobRunDo
	Limit(limit int) IJobRunDo
	Offset(offset int) IJobRunDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IJobRunDo
	Unscoped() IJobRunDo
	Create(values ...*model.JobRun) error
	CreateInBatches(values []*model.JobRun, batchSize int) error
	Save(values ...*model.JobRun) error
	First() (*model.JobRun, error)
	Take() (*model.JobRun, error)
	Last() (*model.JobRun, error)
	Find() ([]*model.JobRun, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JobRun, err error)
	FindInBatches(result *[]*model.JobRun, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.JobRun) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IJobRunDo
	Assign(attrs ...field.AssignExpr) IJobRunDo
	Joins(fields ...field.RelationField) IJobRunDo
	Preload(fields ...field.RelationField) IJobRunDo
	FirstOrInit() (*model.JobRun, error)
	FirstOrCreate() (*model.JobRun, error)
	FindByPage(offset int, limit int) (result []*model.JobRun, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IJobRunDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (j jobRunDo) Debug() IJobRunDo {
	return j.withDO(j.DO.Debug())
}

func (j jobRunDo) WithContext(ctx context.Context) IJobRunDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jobRunDo) ReadDB() IJobRunDo {
	return j.Clauses(dbresolver.Read)
}

func (j jobRunDo) WriteDB() IJobRunDo {
	return j.Clauses(dbresolver.Write)
}

func (j jobRunDo) Session(config *gorm.Session) IJobRunDo {
	return j.withDO(j.DO.Session(config))
}

func (j jobRunDo) Clauses(conds ...clause.Expression) IJobRunDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jobRunDo) Returning(value interface{}, columns ...string) IJobRunDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jobRunDo) Not(conds ...gen.Condition) IJobRunDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jobRunDo) Or(conds ...gen.Condition) IJobRunDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jobRunDo) Select(conds ...field.Expr) IJobRunDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jobRunDo) Where(conds ...gen.Condition) IJobRunDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jobRunDo) Order(conds ...field.Expr) IJobRunDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jobRunDo) Distinct(cols ...field.Expr) IJobRunDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jobRunDo) Omit(cols ...field.Expr) IJobRunDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jobRunDo) Join(table schema.Tabler, on ...field.Expr) IJobRunDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jobRunDo) LeftJoin(table schema.Tabler, on ...field.Expr) IJobRunDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jobRunDo) RightJoin(table schema.Tabler, on ...field.Expr) IJobRunDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jobRunDo) Group(cols ...field.Expr) IJobRunDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jobRunDo) Having(conds ...gen.Condition) IJobRunDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jobRunDo) Limit(limit int) IJobRunDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jobRunDo) Offset(offset int) IJobRunDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jobRunDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IJobRunDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jobRunDo) Unscoped() IJobRunDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jobRunDo) Create(values ...*model.JobRun) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jobRunDo) CreateInBatches(values []*model.JobRun, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jobRunDo) Save(values ...*model.JobRun) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jobRunDo) First() (*model.JobRun, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobRun), nil
	}
}

func (j jobRunDo) Take() (*model.JobRun, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobRun), nil
	}
}

func (j jobRunDo) Last() (*model.JobRun, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobRun), nil
	}
}

func (j jobRunDo) Find() ([]*model.JobRun, error) {
	result, err := j.DO.Find()
	return result.([]*model.JobRun), err
}

func (j jobRunDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JobRun, err error) {
	buf := make([]*model.JobRun, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jobRunDo) FindInBatches(result *[]*model.JobRun, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jobRunDo) Attrs(attrs ...field.AssignExpr) IJobRunDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jobRunDo) Assign(attrs ...field.AssignExpr) IJobRunDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jobRunDo) Joins(fields ...field.RelationField) IJobRunDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jobRunDo) Preload(fields ...field.RelationField) IJobRunDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jobRunDo) FirstOrInit() (*model.JobRun, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobRun), nil
	}
}

func (j jobRunDo) FirstOrCreate() (*model.JobRun, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobRun), nil
	}
}

func (j jobRunDo) FindByPage(offset int, limit int) (result []*model.JobRun, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jobRunDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jobRunDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jobRunDo) Delete(models ...*model.JobRun) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jobRunDo) withDO(do gen.Dao) *jobRunDo {
	j.DO = *do.(*gen.DO)
	return j
}
