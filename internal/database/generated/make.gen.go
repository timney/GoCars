// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"carsdb/internal/database/model"
)

func newMake(db *gorm.DB, opts ...gen.DOOption) make {
	_make := make{}

	_make.makeDo.UseDB(db, opts...)
	_make.makeDo.UseModel(&model.Make{})

	tableName := _make.makeDo.TableName()
	_make.ALL = field.NewAsterisk(tableName)
	_make.ID = field.NewInt32(tableName, "id")
	_make.OldID = field.NewInt32(tableName, "old_id")
	_make.Name = field.NewString(tableName, "name")
	_make.Location = field.NewString(tableName, "location")
	_make.Description = field.NewString(tableName, "description")
	_make.Nationality = field.NewString(tableName, "nationality")
	_make.Slug = field.NewString(tableName, "slug")
	_make.Created = field.NewTime(tableName, "created")
	_make.URL = field.NewString(tableName, "url")
	_make.Active = field.NewInt32(tableName, "active")

	_make.fillFieldMap()

	return _make
}

type make struct {
	makeDo

	ALL         field.Asterisk
	ID          field.Int32
	OldID       field.Int32
	Name        field.String
	Location    field.String
	Description field.String
	Nationality field.String
	Slug        field.String
	Created     field.Time
	URL         field.String
	Active      field.Int32

	fieldMap map[string]field.Expr
}

func (m make) Table(newTableName string) *make {
	m.makeDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m make) As(alias string) *make {
	m.makeDo.DO = *(m.makeDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *make) updateTableName(table string) *make {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.OldID = field.NewInt32(table, "old_id")
	m.Name = field.NewString(table, "name")
	m.Location = field.NewString(table, "location")
	m.Description = field.NewString(table, "description")
	m.Nationality = field.NewString(table, "nationality")
	m.Slug = field.NewString(table, "slug")
	m.Created = field.NewTime(table, "created")
	m.URL = field.NewString(table, "url")
	m.Active = field.NewInt32(table, "active")

	m.fillFieldMap()

	return m
}

func (m *make) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *make) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 10)
	m.fieldMap["id"] = m.ID
	m.fieldMap["old_id"] = m.OldID
	m.fieldMap["name"] = m.Name
	m.fieldMap["location"] = m.Location
	m.fieldMap["description"] = m.Description
	m.fieldMap["nationality"] = m.Nationality
	m.fieldMap["slug"] = m.Slug
	m.fieldMap["created"] = m.Created
	m.fieldMap["url"] = m.URL
	m.fieldMap["active"] = m.Active
}

func (m make) clone(db *gorm.DB) make {
	m.makeDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m make) replaceDB(db *gorm.DB) make {
	m.makeDo.ReplaceDB(db)
	return m
}

type makeDo struct{ gen.DO }

type IMakeDo interface {
	gen.SubQuery
	Debug() IMakeDo
	WithContext(ctx context.Context) IMakeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMakeDo
	WriteDB() IMakeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMakeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMakeDo
	Not(conds ...gen.Condition) IMakeDo
	Or(conds ...gen.Condition) IMakeDo
	Select(conds ...field.Expr) IMakeDo
	Where(conds ...gen.Condition) IMakeDo
	Order(conds ...field.Expr) IMakeDo
	Distinct(cols ...field.Expr) IMakeDo
	Omit(cols ...field.Expr) IMakeDo
	Join(table schema.Tabler, on ...field.Expr) IMakeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMakeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMakeDo
	Group(cols ...field.Expr) IMakeDo
	Having(conds ...gen.Condition) IMakeDo
	Limit(limit int) IMakeDo
	Offset(offset int) IMakeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMakeDo
	Unscoped() IMakeDo
	Create(values ...*model.Make) error
	CreateInBatches(values []*model.Make, batchSize int) error
	Save(values ...*model.Make) error
	First() (*model.Make, error)
	Take() (*model.Make, error)
	Last() (*model.Make, error)
	Find() ([]*model.Make, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Make, err error)
	FindInBatches(result *[]*model.Make, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Make) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMakeDo
	Assign(attrs ...field.AssignExpr) IMakeDo
	Joins(fields ...field.RelationField) IMakeDo
	Preload(fields ...field.RelationField) IMakeDo
	FirstOrInit() (*model.Make, error)
	FirstOrCreate() (*model.Make, error)
	FindByPage(offset int, limit int) (result []*model.Make, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMakeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m makeDo) Debug() IMakeDo {
	return m.withDO(m.DO.Debug())
}

func (m makeDo) WithContext(ctx context.Context) IMakeDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m makeDo) ReadDB() IMakeDo {
	return m.Clauses(dbresolver.Read)
}

func (m makeDo) WriteDB() IMakeDo {
	return m.Clauses(dbresolver.Write)
}

func (m makeDo) Session(config *gorm.Session) IMakeDo {
	return m.withDO(m.DO.Session(config))
}

func (m makeDo) Clauses(conds ...clause.Expression) IMakeDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m makeDo) Returning(value interface{}, columns ...string) IMakeDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m makeDo) Not(conds ...gen.Condition) IMakeDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m makeDo) Or(conds ...gen.Condition) IMakeDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m makeDo) Select(conds ...field.Expr) IMakeDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m makeDo) Where(conds ...gen.Condition) IMakeDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m makeDo) Order(conds ...field.Expr) IMakeDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m makeDo) Distinct(cols ...field.Expr) IMakeDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m makeDo) Omit(cols ...field.Expr) IMakeDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m makeDo) Join(table schema.Tabler, on ...field.Expr) IMakeDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m makeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMakeDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m makeDo) RightJoin(table schema.Tabler, on ...field.Expr) IMakeDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m makeDo) Group(cols ...field.Expr) IMakeDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m makeDo) Having(conds ...gen.Condition) IMakeDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m makeDo) Limit(limit int) IMakeDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m makeDo) Offset(offset int) IMakeDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m makeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMakeDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m makeDo) Unscoped() IMakeDo {
	return m.withDO(m.DO.Unscoped())
}

func (m makeDo) Create(values ...*model.Make) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m makeDo) CreateInBatches(values []*model.Make, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m makeDo) Save(values ...*model.Make) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m makeDo) First() (*model.Make, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Make), nil
	}
}

func (m makeDo) Take() (*model.Make, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Make), nil
	}
}

func (m makeDo) Last() (*model.Make, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Make), nil
	}
}

func (m makeDo) Find() ([]*model.Make, error) {
	result, err := m.DO.Find()
	return result.([]*model.Make), err
}

func (m makeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Make, err error) {
	buf := make([]*model.Make, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m makeDo) FindInBatches(result *[]*model.Make, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m makeDo) Attrs(attrs ...field.AssignExpr) IMakeDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m makeDo) Assign(attrs ...field.AssignExpr) IMakeDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m makeDo) Joins(fields ...field.RelationField) IMakeDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m makeDo) Preload(fields ...field.RelationField) IMakeDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m makeDo) FirstOrInit() (*model.Make, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Make), nil
	}
}

func (m makeDo) FirstOrCreate() (*model.Make, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Make), nil
	}
}

func (m makeDo) FindByPage(offset int, limit int) (result []*model.Make, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m makeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m makeDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m makeDo) Delete(models ...*model.Make) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *makeDo) withDO(do gen.Dao) *makeDo {
	m.DO = *do.(*gen.DO)
	return m
}
