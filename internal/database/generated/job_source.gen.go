// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"carsdb/internal/database/model"
)

func newJobSource(db *gorm.DB, opts ...gen.DOOption) jobSource {
	_jobSource := jobSource{}

	_jobSource.jobSourceDo.UseDB(db, opts...)
	_jobSource.jobSourceDo.UseModel(&model.JobSource{})

	tableName := _jobSource.jobSourceDo.TableName()
	_jobSource.ALL = field.NewAsterisk(tableName)
	_jobSource.ID = field.NewInt32(tableName, "id")
	_jobSource.Name = field.NewString(tableName, "name")

	_jobSource.fillFieldMap()

	return _jobSource
}

type jobSource struct {
	jobSourceDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String

	fieldMap map[string]field.Expr
}

func (j jobSource) Table(newTableName string) *jobSource {
	j.jobSourceDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jobSource) As(alias string) *jobSource {
	j.jobSourceDo.DO = *(j.jobSourceDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jobSource) updateTableName(table string) *jobSource {
	j.ALL = field.NewAsterisk(table)
	j.ID = field.NewInt32(table, "id")
	j.Name = field.NewString(table, "name")

	j.fillFieldMap()

	return j
}

func (j *jobSource) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jobSource) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 2)
	j.fieldMap["id"] = j.ID
	j.fieldMap["name"] = j.Name
}

func (j jobSource) clone(db *gorm.DB) jobSource {
	j.jobSourceDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j jobSource) replaceDB(db *gorm.DB) jobSource {
	j.jobSourceDo.ReplaceDB(db)
	return j
}

type jobSourceDo struct{ gen.DO }

type IJobSourceDo interface {
	gen.SubQuery
	Debug() IJobSourceDo
	WithContext(ctx context.Context) IJobSourceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IJobSourceDo
	WriteDB() IJobSourceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IJobSourceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IJobSourceDo
	Not(conds ...gen.Condition) IJobSourceDo
	Or(conds ...gen.Condition) IJobSourceDo
	Select(conds ...field.Expr) IJobSourceDo
	Where(conds ...gen.Condition) IJobSourceDo
	Order(conds ...field.Expr) IJobSourceDo
	Distinct(cols ...field.Expr) IJobSourceDo
	Omit(cols ...field.Expr) IJobSourceDo
	Join(table schema.Tabler, on ...field.Expr) IJobSourceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IJobSourceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IJobSourceDo
	Group(cols ...field.Expr) IJobSourceDo
	Having(conds ...gen.Condition) IJobSourceDo
	Limit(limit int) IJobSourceDo
	Offset(offset int) IJobSourceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IJobSourceDo
	Unscoped() IJobSourceDo
	Create(values ...*model.JobSource) error
	CreateInBatches(values []*model.JobSource, batchSize int) error
	Save(values ...*model.JobSource) error
	First() (*model.JobSource, error)
	Take() (*model.JobSource, error)
	Last() (*model.JobSource, error)
	Find() ([]*model.JobSource, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JobSource, err error)
	FindInBatches(result *[]*model.JobSource, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.JobSource) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IJobSourceDo
	Assign(attrs ...field.AssignExpr) IJobSourceDo
	Joins(fields ...field.RelationField) IJobSourceDo
	Preload(fields ...field.RelationField) IJobSourceDo
	FirstOrInit() (*model.JobSource, error)
	FirstOrCreate() (*model.JobSource, error)
	FindByPage(offset int, limit int) (result []*model.JobSource, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IJobSourceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (j jobSourceDo) Debug() IJobSourceDo {
	return j.withDO(j.DO.Debug())
}

func (j jobSourceDo) WithContext(ctx context.Context) IJobSourceDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jobSourceDo) ReadDB() IJobSourceDo {
	return j.Clauses(dbresolver.Read)
}

func (j jobSourceDo) WriteDB() IJobSourceDo {
	return j.Clauses(dbresolver.Write)
}

func (j jobSourceDo) Session(config *gorm.Session) IJobSourceDo {
	return j.withDO(j.DO.Session(config))
}

func (j jobSourceDo) Clauses(conds ...clause.Expression) IJobSourceDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jobSourceDo) Returning(value interface{}, columns ...string) IJobSourceDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jobSourceDo) Not(conds ...gen.Condition) IJobSourceDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jobSourceDo) Or(conds ...gen.Condition) IJobSourceDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jobSourceDo) Select(conds ...field.Expr) IJobSourceDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jobSourceDo) Where(conds ...gen.Condition) IJobSourceDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jobSourceDo) Order(conds ...field.Expr) IJobSourceDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jobSourceDo) Distinct(cols ...field.Expr) IJobSourceDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jobSourceDo) Omit(cols ...field.Expr) IJobSourceDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jobSourceDo) Join(table schema.Tabler, on ...field.Expr) IJobSourceDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jobSourceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IJobSourceDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jobSourceDo) RightJoin(table schema.Tabler, on ...field.Expr) IJobSourceDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jobSourceDo) Group(cols ...field.Expr) IJobSourceDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jobSourceDo) Having(conds ...gen.Condition) IJobSourceDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jobSourceDo) Limit(limit int) IJobSourceDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jobSourceDo) Offset(offset int) IJobSourceDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jobSourceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IJobSourceDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jobSourceDo) Unscoped() IJobSourceDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jobSourceDo) Create(values ...*model.JobSource) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jobSourceDo) CreateInBatches(values []*model.JobSource, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jobSourceDo) Save(values ...*model.JobSource) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jobSourceDo) First() (*model.JobSource, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobSource), nil
	}
}

func (j jobSourceDo) Take() (*model.JobSource, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobSource), nil
	}
}

func (j jobSourceDo) Last() (*model.JobSource, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobSource), nil
	}
}

func (j jobSourceDo) Find() ([]*model.JobSource, error) {
	result, err := j.DO.Find()
	return result.([]*model.JobSource), err
}

func (j jobSourceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JobSource, err error) {
	buf := make([]*model.JobSource, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jobSourceDo) FindInBatches(result *[]*model.JobSource, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jobSourceDo) Attrs(attrs ...field.AssignExpr) IJobSourceDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jobSourceDo) Assign(attrs ...field.AssignExpr) IJobSourceDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jobSourceDo) Joins(fields ...field.RelationField) IJobSourceDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jobSourceDo) Preload(fields ...field.RelationField) IJobSourceDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jobSourceDo) FirstOrInit() (*model.JobSource, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobSource), nil
	}
}

func (j jobSourceDo) FirstOrCreate() (*model.JobSource, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobSource), nil
	}
}

func (j jobSourceDo) FindByPage(offset int, limit int) (result []*model.JobSource, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jobSourceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jobSourceDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jobSourceDo) Delete(models ...*model.JobSource) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jobSourceDo) withDO(do gen.Dao) *jobSourceDo {
	j.DO = *do.(*gen.DO)
	return j
}
