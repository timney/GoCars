// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"carsdb/internal/database/model"
)

func newModelSourceMapping(db *gorm.DB, opts ...gen.DOOption) modelSourceMapping {
	_modelSourceMapping := modelSourceMapping{}

	_modelSourceMapping.modelSourceMappingDo.UseDB(db, opts...)
	_modelSourceMapping.modelSourceMappingDo.UseModel(&model.ModelSourceMapping{})

	tableName := _modelSourceMapping.modelSourceMappingDo.TableName()
	_modelSourceMapping.ALL = field.NewAsterisk(tableName)
	_modelSourceMapping.ID = field.NewInt32(tableName, "id")
	_modelSourceMapping.CreatedAt = field.NewTime(tableName, "created_at")
	_modelSourceMapping.ModelID = field.NewInt32(tableName, "model_id")
	_modelSourceMapping.Make = field.NewString(tableName, "make")
	_modelSourceMapping.Model = field.NewString(tableName, "model")
	_modelSourceMapping.JobSourceID = field.NewInt64(tableName, "job_source_id")

	_modelSourceMapping.fillFieldMap()

	return _modelSourceMapping
}

type modelSourceMapping struct {
	modelSourceMappingDo

	ALL         field.Asterisk
	ID          field.Int32
	CreatedAt   field.Time
	ModelID     field.Int32
	Make        field.String
	Model       field.String
	JobSourceID field.Int64

	fieldMap map[string]field.Expr
}

func (m modelSourceMapping) Table(newTableName string) *modelSourceMapping {
	m.modelSourceMappingDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m modelSourceMapping) As(alias string) *modelSourceMapping {
	m.modelSourceMappingDo.DO = *(m.modelSourceMappingDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *modelSourceMapping) updateTableName(table string) *modelSourceMapping {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.ModelID = field.NewInt32(table, "model_id")
	m.Make = field.NewString(table, "make")
	m.Model = field.NewString(table, "model")
	m.JobSourceID = field.NewInt64(table, "job_source_id")

	m.fillFieldMap()

	return m
}

func (m *modelSourceMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *modelSourceMapping) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["model_id"] = m.ModelID
	m.fieldMap["make"] = m.Make
	m.fieldMap["model"] = m.Model
	m.fieldMap["job_source_id"] = m.JobSourceID
}

func (m modelSourceMapping) clone(db *gorm.DB) modelSourceMapping {
	m.modelSourceMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m modelSourceMapping) replaceDB(db *gorm.DB) modelSourceMapping {
	m.modelSourceMappingDo.ReplaceDB(db)
	return m
}

type modelSourceMappingDo struct{ gen.DO }

type IModelSourceMappingDo interface {
	gen.SubQuery
	Debug() IModelSourceMappingDo
	WithContext(ctx context.Context) IModelSourceMappingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IModelSourceMappingDo
	WriteDB() IModelSourceMappingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IModelSourceMappingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IModelSourceMappingDo
	Not(conds ...gen.Condition) IModelSourceMappingDo
	Or(conds ...gen.Condition) IModelSourceMappingDo
	Select(conds ...field.Expr) IModelSourceMappingDo
	Where(conds ...gen.Condition) IModelSourceMappingDo
	Order(conds ...field.Expr) IModelSourceMappingDo
	Distinct(cols ...field.Expr) IModelSourceMappingDo
	Omit(cols ...field.Expr) IModelSourceMappingDo
	Join(table schema.Tabler, on ...field.Expr) IModelSourceMappingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IModelSourceMappingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IModelSourceMappingDo
	Group(cols ...field.Expr) IModelSourceMappingDo
	Having(conds ...gen.Condition) IModelSourceMappingDo
	Limit(limit int) IModelSourceMappingDo
	Offset(offset int) IModelSourceMappingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IModelSourceMappingDo
	Unscoped() IModelSourceMappingDo
	Create(values ...*model.ModelSourceMapping) error
	CreateInBatches(values []*model.ModelSourceMapping, batchSize int) error
	Save(values ...*model.ModelSourceMapping) error
	First() (*model.ModelSourceMapping, error)
	Take() (*model.ModelSourceMapping, error)
	Last() (*model.ModelSourceMapping, error)
	Find() ([]*model.ModelSourceMapping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ModelSourceMapping, err error)
	FindInBatches(result *[]*model.ModelSourceMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ModelSourceMapping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IModelSourceMappingDo
	Assign(attrs ...field.AssignExpr) IModelSourceMappingDo
	Joins(fields ...field.RelationField) IModelSourceMappingDo
	Preload(fields ...field.RelationField) IModelSourceMappingDo
	FirstOrInit() (*model.ModelSourceMapping, error)
	FirstOrCreate() (*model.ModelSourceMapping, error)
	FindByPage(offset int, limit int) (result []*model.ModelSourceMapping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IModelSourceMappingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m modelSourceMappingDo) Debug() IModelSourceMappingDo {
	return m.withDO(m.DO.Debug())
}

func (m modelSourceMappingDo) WithContext(ctx context.Context) IModelSourceMappingDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m modelSourceMappingDo) ReadDB() IModelSourceMappingDo {
	return m.Clauses(dbresolver.Read)
}

func (m modelSourceMappingDo) WriteDB() IModelSourceMappingDo {
	return m.Clauses(dbresolver.Write)
}

func (m modelSourceMappingDo) Session(config *gorm.Session) IModelSourceMappingDo {
	return m.withDO(m.DO.Session(config))
}

func (m modelSourceMappingDo) Clauses(conds ...clause.Expression) IModelSourceMappingDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m modelSourceMappingDo) Returning(value interface{}, columns ...string) IModelSourceMappingDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m modelSourceMappingDo) Not(conds ...gen.Condition) IModelSourceMappingDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m modelSourceMappingDo) Or(conds ...gen.Condition) IModelSourceMappingDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m modelSourceMappingDo) Select(conds ...field.Expr) IModelSourceMappingDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m modelSourceMappingDo) Where(conds ...gen.Condition) IModelSourceMappingDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m modelSourceMappingDo) Order(conds ...field.Expr) IModelSourceMappingDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m modelSourceMappingDo) Distinct(cols ...field.Expr) IModelSourceMappingDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m modelSourceMappingDo) Omit(cols ...field.Expr) IModelSourceMappingDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m modelSourceMappingDo) Join(table schema.Tabler, on ...field.Expr) IModelSourceMappingDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m modelSourceMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IModelSourceMappingDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m modelSourceMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) IModelSourceMappingDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m modelSourceMappingDo) Group(cols ...field.Expr) IModelSourceMappingDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m modelSourceMappingDo) Having(conds ...gen.Condition) IModelSourceMappingDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m modelSourceMappingDo) Limit(limit int) IModelSourceMappingDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m modelSourceMappingDo) Offset(offset int) IModelSourceMappingDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m modelSourceMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IModelSourceMappingDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m modelSourceMappingDo) Unscoped() IModelSourceMappingDo {
	return m.withDO(m.DO.Unscoped())
}

func (m modelSourceMappingDo) Create(values ...*model.ModelSourceMapping) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m modelSourceMappingDo) CreateInBatches(values []*model.ModelSourceMapping, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m modelSourceMappingDo) Save(values ...*model.ModelSourceMapping) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m modelSourceMappingDo) First() (*model.ModelSourceMapping, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelSourceMapping), nil
	}
}

func (m modelSourceMappingDo) Take() (*model.ModelSourceMapping, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelSourceMapping), nil
	}
}

func (m modelSourceMappingDo) Last() (*model.ModelSourceMapping, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelSourceMapping), nil
	}
}

func (m modelSourceMappingDo) Find() ([]*model.ModelSourceMapping, error) {
	result, err := m.DO.Find()
	return result.([]*model.ModelSourceMapping), err
}

func (m modelSourceMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ModelSourceMapping, err error) {
	buf := make([]*model.ModelSourceMapping, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m modelSourceMappingDo) FindInBatches(result *[]*model.ModelSourceMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m modelSourceMappingDo) Attrs(attrs ...field.AssignExpr) IModelSourceMappingDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m modelSourceMappingDo) Assign(attrs ...field.AssignExpr) IModelSourceMappingDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m modelSourceMappingDo) Joins(fields ...field.RelationField) IModelSourceMappingDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m modelSourceMappingDo) Preload(fields ...field.RelationField) IModelSourceMappingDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m modelSourceMappingDo) FirstOrInit() (*model.ModelSourceMapping, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelSourceMapping), nil
	}
}

func (m modelSourceMappingDo) FirstOrCreate() (*model.ModelSourceMapping, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelSourceMapping), nil
	}
}

func (m modelSourceMappingDo) FindByPage(offset int, limit int) (result []*model.ModelSourceMapping, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m modelSourceMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m modelSourceMappingDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m modelSourceMappingDo) Delete(models ...*model.ModelSourceMapping) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *modelSourceMappingDo) withDO(do gen.Dao) *modelSourceMappingDo {
	m.DO = *do.(*gen.DO)
	return m
}
