// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package generated

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                  = new(Query)
	JobRun             *jobRun
	JobSource          *jobSource
	Make               *make
	Model              *model
	ModelResult        *modelResult
	ModelSourceMapping *modelSourceMapping
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	JobRun = &Q.JobRun
	JobSource = &Q.JobSource
	Make = &Q.Make
	Model = &Q.Model
	ModelResult = &Q.ModelResult
	ModelSourceMapping = &Q.ModelSourceMapping
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                 db,
		JobRun:             newJobRun(db, opts...),
		JobSource:          newJobSource(db, opts...),
		Make:               newMake(db, opts...),
		Model:              newModel(db, opts...),
		ModelResult:        newModelResult(db, opts...),
		ModelSourceMapping: newModelSourceMapping(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	JobRun             jobRun
	JobSource          jobSource
	Make               make
	Model              model
	ModelResult        modelResult
	ModelSourceMapping modelSourceMapping
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		JobRun:             q.JobRun.clone(db),
		JobSource:          q.JobSource.clone(db),
		Make:               q.Make.clone(db),
		Model:              q.Model.clone(db),
		ModelResult:        q.ModelResult.clone(db),
		ModelSourceMapping: q.ModelSourceMapping.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		JobRun:             q.JobRun.replaceDB(db),
		JobSource:          q.JobSource.replaceDB(db),
		Make:               q.Make.replaceDB(db),
		Model:              q.Model.replaceDB(db),
		ModelResult:        q.ModelResult.replaceDB(db),
		ModelSourceMapping: q.ModelSourceMapping.replaceDB(db),
	}
}

type queryCtx struct {
	JobRun             IJobRunDo
	JobSource          IJobSourceDo
	Make               IMakeDo
	Model              IModelDo
	ModelResult        IModelResultDo
	ModelSourceMapping IModelSourceMappingDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		JobRun:             q.JobRun.WithContext(ctx),
		JobSource:          q.JobSource.WithContext(ctx),
		Make:               q.Make.WithContext(ctx),
		Model:              q.Model.WithContext(ctx),
		ModelResult:        q.ModelResult.WithContext(ctx),
		ModelSourceMapping: q.ModelSourceMapping.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
